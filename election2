<!DOCTYPE html>
<html lang="en" dir="ltr">
  <head>
    <meta charset="utf-8">
    <title></title>
    <script src="https://d3js.org/d3.v5.min.js"></script>
    <script type="text/javascript" src="election2.js">

    </script>
    <style media="screen">


.viz_election_class {
    position: relative;
    height: 100vh;
    width: 100%;
    padding: 0;
    /* background:blue; */
    /* padding-bottom will be overwritten by JavaScript later */
    /* padding-bottom: 100%; */
}

.edit
{
  stroke:#000000;
  stroke-opacity:0;
}
.background
{
  /* z-index:-2; */
  opacity:0.2;
}
.grid
{
  stroke-opacity:0.2;
}



    </style>
  </head>
  <body>
    <div id="viz_election" class="viz_election_class">


      </div>
<!-- dvxvxv -->
    </div>
    <script type="text/javascript">
      var width=document.getElementById("viz_election").clientWidth;
      var height=document.getElementById("viz_election").clientHeight;
      console.log(height);

      var svg=d3.select("#viz_election")
                .append("svg")
                .attr("width", "100%")
                .attr("height","100%")
                .attr("preserveAspectRatio","xMidYMid")
                .attr("viewBox", "0 0 " + width + " " + height);



var xwidth=[0];
for(var i=1; i<=fam.length;i++)
{
  xwidth.push(width/fam.length*i/1.25);
}
console.log(xwidth);
var yheight=[0];
for(var i=1; i<positions.length;i++)
{
  console.log(height);
  yheight.push(height*i*20/positions.length);
}
var XScale = d3.scaleOrdinal()
                            .domain(fam)
                            .range(xwidth)
                            //.round(true) // <-- Enable rounding
                           //.paddingInner(0.05)
                            ;

var YScale=d3.scaleBand()
                        .domain(positions)
                        .range(yheight)
                        ;


var colorScale=d3.scaleOrdinal()
                .domain(fam)
                .range(colors);


console.log("done");
var padding=200;
var rect_padding_x=width/fam.length/4;
var rect_padding_y=height/positions.length/2;



var arfam=[];
for (var i=0;i<fam.length;i++)
{
  arfam.push(fam[i]);
}



// console.log(fam);
// console.log(dataset);
//
//
// console.log(dataset);
// console.log(fam);

// for(var i=0;i<arfam.length;i++)
//     {svg
//             .append("g")
//             .append("rect")
//              .attr("x", XScale(arfam[i]))
//               .attr("y", YScale(positions[0]))
//               .attr("width",width/arfam.length-rect_padding_x)
//               .attr("height", YScale(positions[positions.length-1])+height/positions.length-rect_padding_y/1.5)
//               .attr("transform", "translate("+padding/1.5+","+padding/2+")")
//               .attr("fill",function(d)
//             {
//               return colorScale(arfam[i]);
//             })
//               .attr("class","background")
//               ;
//
//             }

console.log(fam);
console.log(positions);
console.log(dataset);



var rect=svg.selectAll("rect")
        .data(dataset)
        .enter()
        .append("g")
        .append("rect")
        .attr("x",function(d)
      {
        console.log("x:"+d.x+" y:"+(d.y));
        // console.log("y:"+(d.y));
        return XScale(d.x);
      })
      .attr("y",function(d)
    {
     // console.log("y:"+(d.y));
      return YScale(d.y);
    })
    .attr("height",height/positions.length-rect_padding_y/1.5)
    .attr("width",width/fam.length-rect_padding_x)
    .attr("transform","translate("+padding/1.5+","+padding/2+")")
    .attr("fill",function(d)
  {
    return colorScale(d.x);
  })
    .on("mouseover",function(d)
  {
    console.log("inside");
  })
  .on("mouseout",function()
{
  console.log("outside");
});












var xAxis = d3.axisTop()
            .scale(XScale);


svg.append("g")
    .attr("transform","translate("+(padding/1.5+(width/fam.length/2))+","+padding/2+")")
    .call(xAxis)
    .attr("class","edit")
    .selectAll("text")
    .style("text-anchor", "start")
    .attr("transform", function(d) {
                return "rotate(-65)"
                })
      ;

var yAxis = d3.axisLeft()
    .scale(YScale)
    ;

svg.append("g")
    .attr("transform","translate("+padding/1.5+","+(padding/2)+")")
    .call(yAxis)
    .attr("class","edit")
    ;

 for(var i=0; i<positions.length; i++)
    {
//console.log(fam[0]);
        svg.append("g")
        .append("rect")

          .attr("x", XScale(fam[0]))
          .attr("y", YScale(positions[i]))
          .attr("height",rect_padding_y/8)
          .attr("width",XScale(fam[fam.length]))
          // .attr("fill","#ffffff")
            .attr("transform","translate("+padding/1.53+","+padding/2+")")
            .attr("class","grid");
    }
for(var i=0; i<fam.length; i++)
   {
//console.log(fam[0]);
       svg.append("g")
       .append("rect")

         .attr("x", XScale(fam[i])-rect_padding_x/5.35)
         .attr("y", YScale(positions[0]))
         .attr("height",YScale(positions[positions.length-1])+height/positions.length-rect_padding_y/1.5)
         .attr("width",rect_padding_x/8)
         // .attr("fill","#ffffff")
           .attr("transform","translate("+(padding/1.53+XScale(fam[1]))+","+padding/2+")")
           .attr("class","grid");
   }


    </script>

  </body>
</html>
